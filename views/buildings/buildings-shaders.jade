mixin buildingShaders(id)
    script(type="x/vertex-shader" id="#{id}-vertex").
        varying vec3 pos;
        varying vec2 vUv;
        varying vec3 norm;
        void main() {
            vUv = uv;
            pos = position;
            norm = normal;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
    script(type="x/fragment-shader" id="#{id}-frag").
        varying vec2 vUv;
        varying vec3 pos;
        varying vec3 norm;
        uniform vec3 camera;
        uniform vec3 shade;
        uniform vec3 light;
        uniform vec3 lowFire;
        uniform vec3 highFire;
        uniform float intensity;
        uniform int override;
        uniform int timeDomainData[128];

        $insertUglyAssGetAtHere

        void main() {
            float dist = distance(camera, pos);
            float dProd = log(1. + 500. / (dist + 100.));
            float fireFactor = 0.;
            vec3 fire;
            // powerFactor Determines the amount of leak from the edges. Should decrease with distance.
            int xLine = int(mod(floor(pos.x/10.), 128.));
            int zLine = int(mod(floor(pos.z/10.), 128.));
            float powerFactor = intensity * abs(sin(pos.x) * 0.5 + 1.) * abs(sin(pos.z) * .5 + 1.);

            float bandGain = floor(float((getAt(xLine) + getAt(zLine)))/2.);
            fire = pow(bandGain/256.,0.5) * highFire + (1. - pow(bandGain/256.,0.5)) * lowFire;
            if(pos.y < bandGain) {
                if(mod(floor(pos.y),4.) == 0.)
                    powerFactor = 0.;
                else
                    powerFactor *= bandGain/128.;
                fireFactor = 1.0;
            }

            // These values peak in the vicinity of their corresponding edges.
            float xStart = 1./pow(vUv.x, powerFactor);
            float xEnd = 1./pow(1.-vUv.x, powerFactor);
            float yStart = 1./pow(vUv.y, powerFactor);
            float yEnd = 1./pow(1.-vUv.y, powerFactor);

            // edgeFactor creates the bright falloff.
            float edgeFactor = 1./100. * (xStart + xEnd + yStart + yEnd);

            vec3 color = fireFactor * fire + (1. - fireFactor) * light;
            gl_FragColor = vec4(dProd * (edgeFactor * color + (max(0., 0.2 - edgeFactor) * shade)), 1.);
        }